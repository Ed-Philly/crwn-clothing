{"ast":null,"code":"import { ShopActionTypes } from './shop.types';\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\nexport const fetchCollectionFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //dispatch function enabled using redux thunk i.e dispatch actions based on events\n//if redux thunk middleware is enabled, anytime you attempt to dispatch a function instead of\n// an object, it will call that function with a dispatch method itself as the first argument\n\nexport const fetchCollectionStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionStart());\n    collectionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionsSnapShotToMap(snapshot);\n      dispatch(fetchCollectionSuccess(collectionMap));\n    }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapShotToMap","fetchCollectionStart","type","FETCH_COLLECTIONS_START","fetchCollectionSuccess","collectionMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAAO;AACvCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADiB,CAAP,CAA7B;AAIP,OAAO,MAAMC,sBAAsB,GAAGC,aAAa,KAAK;AACpDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBAD8B;AAEpDC,EAAAA,OAAO,EAAEF;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAMG,sBAAsB,GAAGC,YAAY,KAAK;AACnDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD6B;AAEnDH,EAAAA,OAAO,EAAEE;AAF0C,CAAL,CAA3C,C,CAKP;AACA;AACA;;AAEA,OAAO,MAAME,yBAAyB,GAAG,MAAM;AAC3C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AAEAF,IAAAA,QAAQ,CAACX,oBAAoB,EAArB,CAAR;AAEAY,IAAAA,aAAa,CACRE,GADL,GAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,YAAMZ,aAAa,GAAGL,+BAA+B,CAACiB,QAAD,CAArD;AACAL,MAAAA,QAAQ,CAACR,sBAAsB,CAACC,aAAD,CAAvB,CAAR;AAEH,KANL,EAOKa,KAPL,CAOWC,KAAK,IAAIP,QAAQ,CAACJ,sBAAsB,CAACW,KAAK,CAACC,OAAP,CAAvB,CAP5B;AAQH,GAbD;AAcH,CAfM","sourcesContent":["import { ShopActionTypes } from './shop.types'\nimport { firestore, convertCollectionsSnapShotToMap } from '../../firebase/firebase.utils'\n\nexport const fetchCollectionStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n\n});\nexport const fetchCollectionSuccess = collectionMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionMap\n})\n\nexport const fetchCollectionFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\n//dispatch function enabled using redux thunk i.e dispatch actions based on events\n//if redux thunk middleware is enabled, anytime you attempt to dispatch a function instead of\n// an object, it will call that function with a dispatch method itself as the first argument\n\nexport const fetchCollectionStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n\n        dispatch(fetchCollectionStart());\n\n        collectionRef\n            .get()\n            .then(snapshot => {\n                const collectionMap = convertCollectionsSnapShotToMap(snapshot);\n                dispatch(fetchCollectionSuccess(collectionMap));\n\n            })\n            .catch(error => dispatch(fetchCollectionFailure(error.message)));\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}