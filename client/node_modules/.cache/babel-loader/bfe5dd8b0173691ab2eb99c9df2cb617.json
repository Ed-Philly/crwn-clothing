{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAUtpWw-G_XoX_G8TSnotNXY3-6csizuQs\",\n  authDomain: \"crwn-db-775e5.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-775e5.firebaseio.com\",\n  projectId: \"crwn-db-775e5\",\n  storageBucket: \"crwn-db-775e5.appspot.com\",\n  messagingSenderId: \"360539250172\",\n  appId: \"1:360539250172:web:c7d406d4e7eeb01ffca679\",\n  measurementId: \"G-CCBLWR4HM8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  console.log(userAuth);\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //creates new collections to firebase called collections representing our shop data\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(config);\nexport const convertCollectionsSnapShotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  promt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","convertCollectionsSnapShotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","auth","provider","GoogleAuthProvider","setCustomParameters","promt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAUtpWw-G_XoX_G8TSnotNXY3-6csizuQs\",\n    authDomain: \"crwn-db-775e5.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-775e5.firebaseio.com\",\n    projectId: \"crwn-db-775e5\",\n    storageBucket: \"crwn-db-775e5.appspot.com\",\n    messagingSenderId: \"360539250172\",\n    appId: \"1:360539250172:web:c7d406d4e7eeb01ffca679\",\n    measurementId: \"G-CCBLWR4HM8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n    console.log(userAuth)\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapshot = await userRef.get();\n\n    if (!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({ displayName, email, createdAt, ...additionalData });\n\n        } catch (error) {\n            console.log('error creating user', error.message);\n\n        }\n    }\n\n    return userRef;\n\n}\n//creates new collections to firebase called collections representing our shop data\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n    console.log(collectionRef);\n\n    const batch = firestore.batch();\n\n\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n\n    });\n\n    return await batch.commit()\n\n};\n\nfirebase.initializeApp(config);\n\nexport const convertCollectionsSnapShotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n        const { title, items } = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    });\n    console.log(transformedCollection)\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ promt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n\n\n"]},"metadata":{},"sourceType":"module"}