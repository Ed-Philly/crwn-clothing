{"ast":null,"code":"var _jsxFileName = \"/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/pages/shop/shop.component.js\";\nimport React from 'react';\nimport './shop.style.css';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect'; //components\n\nimport CollectionViews from '../../components/collection-overview/collection-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nimport { connect } from 'react-redux';\nimport { fetchCollectionStartAsync } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'; //wrapped components\n\nconst CollectionViewsWithSpinner = WithSpinner(CollectionViews);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionStartAsync\n    } = this.props;\n    fetchCollectionStartAsync(); //FETCH PATTERN REST API CALL: return value of collection is very nested\n    //fetch('https://firestore.googleapis.com/v1/projects/crwn-db-775e5/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n    //PROMISE PATTERN moved to redux for extensibility \n    // collectionRef.get().then(snapshot => {\n    //     const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    // }, error => console.log('data not loaded', error));\n    //FIREBASE OBSERVER \n    //this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //    const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n    //    updateCollections(collectionMap);\n    //    this.setState({ loading: false });\n    //});\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFecthing\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"collection-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionViewsWithSpinner, Object.assign({\n        isLoading: isCollectionFecthing\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isCollectionFecthing\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync)\n});\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFecthing: selectIsCollectionFetching\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/pages/shop/shop.component.js"],"names":["React","Route","createStructuredSelector","CollectionViews","CollectionPage","selectIsCollectionFetching","connect","fetchCollectionStartAsync","WithSpinner","CollectionViewsWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFecthing","path","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CAEA;;AACA,OAAOC,eAAP,MAA4B,oEAA5B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAOC,WAAP,MAAwB,sDAAxB,C,CAEA;;AACA,MAAMC,0BAA0B,GAAGD,WAAW,CAACL,eAAD,CAA9C;AACA,MAAMO,yBAAyB,GAAGF,WAAW,CAACJ,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAGnCC,EAAAA,iBAAiB,GAAG;AAEhB,UAAM;AAAEN,MAAAA;AAAF,QAAgC,KAAKO,KAA3C;AAEAP,IAAAA,yBAAyB,GAJT,CAOhB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEH;;AACDQ,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkC,KAAKH,KAA7C;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAAjC;AACI,MAAA,MAAM,EAAGJ,KAAD,iBACJ,oBAAC,0BAAD;AAA4B,QAAA,SAAS,EAAEG;AAAvC,SAAiEH,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAII,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBAAjC;AACI,MAAA,MAAM,EAAGJ,KAAD,iBACJ,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEG;AAAtC,SAAgEH,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAUH;;AA5CkC;;AA8CvC,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,yBAAyB,EAAE,MAAMa,QAAQ,CAACb,yBAAD;AADL,CAAL,CAAnC;;AAIA,MAAMc,eAAe,GAAGnB,wBAAwB,CAAC;AAE7Ce,EAAAA,oBAAoB,EAAEZ;AAFuB,CAAD,CAAhD;AAKA,eAAeC,OAAO,CAACe,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CR,QAA7C,CAAf","sourcesContent":["import React from 'react'\nimport './shop.style.css'\nimport { Route } from 'react-router-dom'\nimport { createStructuredSelector } from 'reselect'\n\n//components\nimport CollectionViews from '../../components/collection-overview/collection-overview.component'\nimport CollectionPage from '../collection/collection.component'\n\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors'\nimport { connect } from 'react-redux'\nimport { fetchCollectionStartAsync } from '../../redux/shop/shop.actions'\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'\n\n//wrapped components\nconst CollectionViewsWithSpinner = WithSpinner(CollectionViews);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\n\n    componentDidMount() {\n\n        const { fetchCollectionStartAsync } = this.props;\n\n        fetchCollectionStartAsync();\n\n\n        //FETCH PATTERN REST API CALL: return value of collection is very nested\n        //fetch('https://firestore.googleapis.com/v1/projects/crwn-db-775e5/databases/(default)/documents/collections')\n        // .then(response => response.json())\n        // .then(collections => console.log(collections))\n\n        //PROMISE PATTERN moved to redux for extensibility \n        // collectionRef.get().then(snapshot => {\n        //     const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n        //     updateCollections(collectionMap);\n        //     this.setState({ loading: false });\n        // }, error => console.log('data not loaded', error));\n\n        //FIREBASE OBSERVER \n        //this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n        //    const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n        //    updateCollections(collectionMap);\n        //    this.setState({ loading: false });\n        //});\n\n    }\n    render() {\n\n        const { match, isCollectionFecthing } = this.props\n\n        return (\n            <div className='collection-page'>\n                <Route exact path={`${match.path}`}\n                    render={(props) =>\n                        <CollectionViewsWithSpinner isLoading={isCollectionFecthing} {...props} />} />\n                <Route exact path={`${match.path}/:collectionId`}\n                    render={(props) =>\n                        <CollectionPageWithSpinner isLoading={isCollectionFecthing} {...props} />} />\n            </div>\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync)\n})\n\nconst mapStateToProps = createStructuredSelector({\n\n    isCollectionFecthing: selectIsCollectionFetching\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}