{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAUtpWw-G_XoX_G8TSnotNXY3-6csizuQs\",\n  authDomain: \"crwn-db-775e5.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-775e5.firebaseio.com\",\n  projectId: \"crwn-db-775e5\",\n  storageBucket: \"crwn-db-775e5.appspot.com\",\n  messagingSenderId: \"360539250172\",\n  appId: \"1:360539250172:web:c7d406d4e7eeb01ffca679\",\n  measurementId: \"G-CCBLWR4HM8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  console.log(userAuth);\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  promt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","collectionRef","collection","collectionSnapshot","get","docs","map","data","snapshot","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","promt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe;AACfE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,QAAMI,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQN,QAAQ,CAACO,GAAI,EAApC,CAAhB;AAEA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AACA,QAAMC,kBAAkB,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAjC;AAEAT,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,IAAAA,UAAU,EAAEC,kBAAkB,CAACE,IAAnB,CAAwBC,GAAxB,CAA4BP,GAAG,IAAIA,GAAG,CAACQ,IAAJ,EAAnC;AAAd,GAAZ;AAIA,QAAMC,QAAQ,GAAG,MAAMX,OAAO,CAACO,GAAR,EAAvB;;AAIA,MAAI,CAACI,QAAQ,CAACC,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBlB,QAA/B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMhB,OAAO,CAACiB,GAAR,CAAY;AAAEJ,QAAAA,WAAF;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA,SAAtB;AAAiC,WAAGlB;AAApC,OAAZ,CAAN;AAEH,KAHD,CAGE,OAAOqB,KAAP,EAAc;AACZpB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCmB,KAAK,CAACC,OAAzC;AAEH;AACJ;;AAED,SAAOnB,OAAP;AAEH,CAhCM;AAkCPf,QAAQ,CAACmC,aAAT,CAAuBlC,MAAvB;AAEA,OAAO,MAAMmC,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMpB,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;AAEP,MAAMqB,QAAQ,GAAG,IAAIrC,QAAQ,CAACoC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAerC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAUtpWw-G_XoX_G8TSnotNXY3-6csizuQs\",\n    authDomain: \"crwn-db-775e5.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-775e5.firebaseio.com\",\n    projectId: \"crwn-db-775e5\",\n    storageBucket: \"crwn-db-775e5.appspot.com\",\n    messagingSenderId: \"360539250172\",\n    appId: \"1:360539250172:web:c7d406d4e7eeb01ffca679\",\n    measurementId: \"G-CCBLWR4HM8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n    console.log(userAuth)\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const collectionRef = firestore.collection('users');\n    const collectionSnapshot = await collectionRef.get();\n\n    console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) });\n\n\n\n    const snapshot = await userRef.get();\n\n\n\n    if (!snapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({ displayName, email, createdAt, ...additionalData });\n\n        } catch (error) {\n            console.log('error creating user', error.message);\n\n        }\n    }\n\n    return userRef;\n\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ promt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n\n\n"]},"metadata":{},"sourceType":"module"}