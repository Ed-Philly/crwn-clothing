{"ast":null,"code":"var _jsxFileName = \"/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/pages/shop/shop.component.js\";\nimport React, { useEffect } from 'react';\nimport './shop.style.css';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect'; //components\n\nimport CollectionViewsContainer from '../../components/collection-overview/collection-overview.container';\nimport CollectionPage from '../collection/collection.component';\nimport { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/shop/shop.selectors';\nimport { connect } from 'react-redux';\nimport { fetchCollectionStart } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'; //wrapped components\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  match,\n  isFecthingCollection,\n  fetchCollectionStart\n}) => {\n  useEffect(() => {\n    fetchCollectionStart();\n  }); //FETCH PATTERN REST API CALL: return value of collection is very nested\n  //fetch('https://firestore.googleapis.com/v1/projects/crwn-db-775e5/databases/(default)/documents/collections')\n  // .then(response => response.json())\n  // .then(collections => console.log(collections))\n  //PROMISE PATTERN moved to redux for extensibility \n  // collectionRef.get().then(snapshot => {\n  //     const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n  //     updateCollections(collectionMap);\n  //     this.setState({ loading: false });\n  // }, error => console.log('data not loaded', error));\n  //FIREBASE OBSERVER \n  //this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n  //    const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n  //    updateCollections(collectionMap);\n  //    this.setState({ loading: false });\n  //});\n  //using a HOC to wrap our HOC WithSpinner then we dont need render to pass in prop\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"collection-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionViewsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n      isLoading: isFecthingCollection\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStart: () => dispatch(fetchCollectionStart())\n});\n\nconst mapStateToProps = createStructuredSelector({\n  isFecthingCollection: selectIsCollectionFetching,\n  isCollectionLoaded: selectIsCollectionLoaded\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/eglekniukstaite/Desktop/EDDY/ReactProjects/Course/crwn-clothing/src/pages/shop/shop.component.js"],"names":["React","useEffect","Route","createStructuredSelector","CollectionViewsContainer","CollectionPage","selectIsCollectionFetching","selectIsCollectionLoaded","connect","fetchCollectionStart","WithSpinner","CollectionPageWithSpinner","ShopPage","match","isFecthingCollection","path","props","mapDispatchToProps","dispatch","mapStateToProps","isCollectionLoaded"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CAEA;;AACA,OAAOC,wBAAP,MAAqC,oEAArC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAGA,SAASC,0BAAT,EAAqCC,wBAArC,QAAqE,iCAArE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,OAAOC,WAAP,MAAwB,sDAAxB,C,CAEA;;AACA,MAAMC,yBAAyB,GAAGD,WAAW,CAACL,cAAD,CAA7C;;AAEA,MAAMO,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,oBAAT;AAA+BL,EAAAA;AAA/B,CAAD,KAA2D;AAExER,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,oBAAoB;AACvB,GAFQ,CAAT,CAFwE,CAOxE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACE,IAAK,EAAjC;AAAoC,IAAA,SAAS,EAAEX,wBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAES,KAAK,CAACE,IAAK,gBAAjC;AACI,IAAA,MAAM,EAAGC,KAAD,iBACJ,oBAAC,yBAAD;AAA2B,MAAA,SAAS,EAAEF;AAAtC,OAAgEE,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAQH,CArCD;;AAuCA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCT,EAAAA,oBAAoB,EAAE,MAAMS,QAAQ,CAACT,oBAAoB,EAArB;AADA,CAAL,CAAnC;;AAIA,MAAMU,eAAe,GAAGhB,wBAAwB,CAAC;AAE7CW,EAAAA,oBAAoB,EAAER,0BAFuB;AAG7Cc,EAAAA,kBAAkB,EAAEb;AAHyB,CAAD,CAAhD;AAMA,eAAeC,OAAO,CAACW,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CL,QAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport './shop.style.css'\nimport { Route } from 'react-router-dom'\nimport { createStructuredSelector } from 'reselect'\n\n//components\nimport CollectionViewsContainer from '../../components/collection-overview/collection-overview.container'\nimport CollectionPage from '../collection/collection.component'\n\n\nimport { selectIsCollectionFetching, selectIsCollectionLoaded } from '../../redux/shop/shop.selectors'\nimport { connect } from 'react-redux'\nimport { fetchCollectionStart } from '../../redux/shop/shop.actions'\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'\n\n//wrapped components\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({ match, isFecthingCollection, fetchCollectionStart }) => {\n\n    useEffect(() => {\n        fetchCollectionStart();\n    });\n\n\n    //FETCH PATTERN REST API CALL: return value of collection is very nested\n    //fetch('https://firestore.googleapis.com/v1/projects/crwn-db-775e5/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n\n    //PROMISE PATTERN moved to redux for extensibility \n    // collectionRef.get().then(snapshot => {\n    //     const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    // }, error => console.log('data not loaded', error));\n\n    //FIREBASE OBSERVER \n    //this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //    const collectionMap = convertCollectionsSnapShotToMap(snapshot)\n    //    updateCollections(collectionMap);\n    //    this.setState({ loading: false });\n    //});\n\n    //using a HOC to wrap our HOC WithSpinner then we dont need render to pass in prop\n\n\n    return (\n        <div className='collection-page'>\n            <Route exact path={`${match.path}`} component={CollectionViewsContainer} />\n            <Route exact path={`${match.path}/:collectionId`}\n                render={(props) =>\n                    <CollectionPageWithSpinner isLoading={isFecthingCollection} {...props} />} />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionStart: () => dispatch(fetchCollectionStart())\n})\n\nconst mapStateToProps = createStructuredSelector({\n\n    isFecthingCollection: selectIsCollectionFetching,\n    isCollectionLoaded: selectIsCollectionLoaded\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}